function getRoom(phaseData = {}) {
  return {
    room: {      // комната если есть; если комнаты нет, там будет null, пинговать сервер не нужно
      id: '',    // идентификатор комнаты
      me: {      // объект текущего пользователя
        cards: [ // текущая колода в руке
          {imageUrl: ''}, // адрес изображения, он же является уникальным идентификатором
          {imageUrl: ''}, // адрес изображения, он же является уникальным идентификатором
          {imageUrl: ''}, // адрес изображения, он же является уникальным идентификатором
          {imageUrl: ''}, // адрес изображения, он же является уникальным идентификатором
          {imageUrl: ''}  // адрес изображения, он же является уникальным идентификатором
        ],
        score: 999, // количество очков в текущей партии
      },
      players: [    // остальные игроки
        {
          id: Math.random() * 100,          // идентификатор игрока
          pic: '',                          // адрес его аватарки 100х100
          name: 'Петя',                     // имя
          score: Math.random() * 100,       // текущий счёт в игре,
          lastActive: new Date().getTime(), // таймстамп в миллисекундах последнего момента когда от этого пользователя был запрос
        },
        {
          id: Math.random() * 100,          // идентификатор игрока
          pic: '',                          // адрес его аватарки 100х100
          name: 'Петя',                     // имя
          score: Math.random() * 100,       // текущий счёт в игре,
          lastActive: new Date().getTime(), // таймстамп в миллисекундах последнего момента когда от этого пользователя был запрос
        },
        {
          id: Math.random() * 100,          // идентификатор игрока
          pic: '',                          // адрес его аватарки 100х100
          name: 'Петя',                     // имя
          score: Math.random() * 100,       // текущий счёт в игре,
          lastActive: new Date().getTime(), // таймстамп в миллисекундах последнего момента когда от этого пользователя был запрос
        }
      ],
      phase: { // текущая фаза игры
        timeStart: new Date().getTime() - 10000, // таймстамп в миллисекундах момента когда фаза началась
        timeEnd: new Date().getTime() + 10000,   // таймстамп в миллисекундах момента когда фаза закончится
        phaseData
      }
    }
  };
}

const SimplePhase = getRoom();
const AwaitForStart = getRoom({ type: "AwaitForStart", data: {} });
const EmptyRoom = { room: null };
const ChooseImage = getRoom({
  type: "ChooseImage",
  data: {
    phrases: [ // список текущих фраз
      {
        id: '',    // идентификатор фразы в системе
        text: '1', // текст фразы
      },
      {
        id: '',    // идентификатор фразы в системе
        text: '2', // текст фразы
      },
      {
        id: '',    // идентификатор фразы в системе
        text: '3', // текст фразы
      }
    ],
    choice: {       // выбор текущего игрока, будет не заполнено пока выбор не сделан
      phraseId: '', // идентификатор фразы в системе
      imageUrl: '', // адрес картинки, он же идентификатор
    }
  }
});


export default {
  getRoom,
  Ping: SimplePhase,
  JoinRoom: AwaitForStart,
  LeaveRoom: EmptyRoom,
  ChooseImage: ChooseImage,
  Vote: SimplePhase
};

/*
  Vote: {
    phaseData: {
      type: "Vote",
      data: {
        images: [ // изображения для голосования
          {
            userId: "1234", // идентификатор игрока
            imageUrl: "http://jpg", // адрес картинки этого игрока
          },
        ],
        players: [ // информация о том, проголосовали ли другие игроки
          {
            userId: "1234", // что за игрок
            voted: 1, // количество картинок за которые уже проголосовал этот игрок, чтобы отслеживать прогресс
          },
        ],
      },
    }
  },
  VoteResult: {
    phaseData: {
      type: "VoteResult",
      data: {
        images: [ // изображения игроков
          {
            userId: "1234", // идентификатор игрока
            imageUrl: "http://jpg", // адрес картинки этого игрока
            phraseId: "abcd", // какая фраза была фактически выбрана этим игроком
          },
        ],
        votes: [
          {
            from: { // кто голосовал
              userId: "1234", // что за юзер
              score: 1, // сколько очков за это получил голосующий
            },
            to: { // за кого голосовал
              userId: "1234", // что за юзер
              score: 1, // сколько очков за это получил автор картинки
            },
          },
        ],
      },
    }
  },
  EndGame: {
    phaseData: {
      type: "EndGame",
      data: {
        reason: "MaxScore", // причина завершения игры, см ниже
      },
    }
  }
};*/